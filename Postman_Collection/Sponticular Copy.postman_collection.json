{
	"info": {
		"_postman_id": "71cf4c68-9fdb-4aab-be64-5c5c691cd101",
		"name": "Sponticular Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18599841"
	},
	"item": [
		{
			"name": "Search Recipes 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&maxAlcohol=100",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "maxAlcohol",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post recipes/cuisine 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Mediterranean\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Indian\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"European\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Italian\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(276);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "value",
							"value": "f0aff8f0262c4d24a997529555086625",
							"type": "string"
						},
						{
							"key": "key",
							"value": "apiKey",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "tittle\n",
							"value": "Mediterranean",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api.spoonacular.com/recipes/cuisine",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"cuisine"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta",
							"disabled": true
						},
						{
							"key": "maxAlcohol",
							"value": "100",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post ingrMap2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Mediterranean\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Indian\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"European\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Italian\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(276);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "value",
							"value": "f0aff8f0262c4d24a997529555086625",
							"type": "string"
						},
						{
							"key": "key",
							"value": "apiKey",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\t{ \"ingredients\": [\"eggs\",\"bacon\"], \"servings\": 2 }"
				},
				"url": {
					"raw": "https://api.spoonacular.com/food/ingredients/map",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"food",
						"ingredients",
						"map"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta",
							"disabled": true
						},
						{
							"key": "maxAlcohol",
							"value": "100",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post ingrMap5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Mediterranean\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Indian\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"European\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Italian\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(276);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "value",
							"value": "f0aff8f0262c4d24a997529555086625",
							"type": "string"
						},
						{
							"key": "key",
							"value": "apiKey",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "instructions",
							"value": "\tPut the garlic in a pan and then add the onion. Add some salt and oregano",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api.spoonacular.com/recipes/analyzeInstructions",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"analyzeInstructions"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta",
							"disabled": true
						},
						{
							"key": "maxAlcohol",
							"value": "100",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post ingrMap5 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Mediterranean\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Indian\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"European\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Italian\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(276);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "value",
							"value": "f0aff8f0262c4d24a997529555086625",
							"type": "string"
						},
						{
							"key": "key",
							"value": "apiKey",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "instructions",
							"value": "\tPut the garlic in a pan and then add the onion. Add some salt and oregano",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api.spoonacular.com/recipes/analyzeInstructions",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"analyzeInstructions"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta",
							"disabled": true
						},
						{
							"key": "maxAlcohol",
							"value": "100",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post ingrMap3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Mediterranean\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Indian\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"European\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Italian\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(276);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "value",
							"value": "f0aff8f0262c4d24a997529555086625",
							"type": "string"
						},
						{
							"key": "key",
							"value": "apiKey",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\t{ \"ingredients\": [\"lemon\",\"tomato\"], \"servings\": 5 }"
				},
				"url": {
					"raw": "https://api.spoonacular.com/food/ingredients/map",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"food",
						"ingredients",
						"map"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta",
							"disabled": true
						},
						{
							"key": "maxAlcohol",
							"value": "100",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post ingrMap4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Mediterranean\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Indian\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"European\");\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Italian\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(276);\r",
							"});\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.expect(tv4.validate(data2, schema)).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "query",
							"type": "string"
						},
						{
							"key": "value",
							"value": "f0aff8f0262c4d24a997529555086625",
							"type": "string"
						},
						{
							"key": "key",
							"value": "apiKey",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\t{ \"ingredients\": [\"apple\",\"potato\"], \"servings\": 5 }"
				},
				"url": {
					"raw": "https://api.spoonacular.com/food/ingredients/map",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"food",
						"ingredients",
						"map"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta",
							"disabled": true
						},
						{
							"key": "maxAlcohol",
							"value": "100",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&maxFolicAcid=100&minIodine=0",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "maxFolicAcid",
							"value": "100"
						},
						{
							"key": "minIodine",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&minMagnesium=0&maxVitaminB1=100&maxVitaminB2=0",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "minMagnesium",
							"value": "0"
						},
						{
							"key": "maxVitaminB1",
							"value": "100"
						},
						{
							"key": "maxVitaminB2",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&maxVitaminK=100&maxVitaminE=100",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "maxVitaminK",
							"value": "100"
						},
						{
							"key": "maxVitaminE",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&maxSaturatedFat=100&minSaturatedFat=0&maxFluoride=100",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "maxSaturatedFat",
							"value": "100"
						},
						{
							"key": "minSaturatedFat",
							"value": "0"
						},
						{
							"key": "maxFluoride",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&maxAlcohol=100&minCholine=0&maxCalcium=100",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "maxAlcohol",
							"value": "100"
						},
						{
							"key": "minCholine",
							"value": "0"
						},
						{
							"key": "maxCalcium",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&maxAlcohol=100&titleMatch=Crock Pot",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "maxAlcohol",
							"value": "100"
						},
						{
							"key": "titleMatch",
							"value": "Crock Pot"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&recipeBoxId=2468",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "recipeBoxId",
							"value": "2468"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&author=coffeebean",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "author",
							"value": "coffeebean"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?maxAlcohol=100&addRecipeNutrition=false",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta",
							"disabled": true
						},
						{
							"key": "maxAlcohol",
							"value": "100"
						},
						{
							"key": "addRecipeNutrition",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 11",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/queries/analyze?q=salmon with fusilli and no nuts",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"queries",
						"analyze"
					],
					"query": [
						{
							"key": "q",
							"value": "salmon with fusilli and no nuts"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 11",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&fillIngredients=false",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "fillIngredients",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 12",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?cuisine=italian&maxAlcohol=100",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "cuisine",
							"value": "italian"
						},
						{
							"key": "maxAlcohol",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 13",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?query=\tpasta&diet=vegetarian&intolerances=gluten&addRecipeNutrition=false",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "query",
							"value": "\tpasta"
						},
						{
							"key": "diet",
							"value": "vegetarian"
						},
						{
							"key": "intolerances",
							"value": "gluten"
						},
						{
							"key": "addRecipeNutrition",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 14",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Offset is equal to zero\", function () {\r",
							"var jsonData = pm.response.json();\r",
							"var offsetData = jsonData.offset;\r",
							"pm.expect(offsetData).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?cuisine=russian&maxAlcohol=1004&equipment=pan",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "cuisine",
							"value": "russian"
						},
						{
							"key": "maxAlcohol",
							"value": "1004"
						},
						{
							"key": "equipment",
							"value": "pan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 15",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?cuisine=italian&excludeCuisine=greek&maxCalories=800",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "cuisine",
							"value": "italian"
						},
						{
							"key": "excludeCuisine",
							"value": "greek"
						},
						{
							"key": "maxCalories",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 16",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?cuisine=italian&excludeCuisine=greek&intolerances=Soy",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "cuisine",
							"value": "italian"
						},
						{
							"key": "excludeCuisine",
							"value": "greek"
						},
						{
							"key": "intolerances",
							"value": "Soy"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 17",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?cuisine=Japanese&excludeCuisine=greek&intolerances=Seafood",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "cuisine",
							"value": "Japanese"
						},
						{
							"key": "excludeCuisine",
							"value": "greek"
						},
						{
							"key": "intolerances",
							"value": "Seafood"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 18",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?cuisine=Caribbean&intolerances=Egg&intolerances=gluten",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "cuisine",
							"value": "Caribbean"
						},
						{
							"key": "intolerances",
							"value": "Egg"
						},
						{
							"key": "intolerances",
							"value": "gluten"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 19",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?cuisine=European&excludeCuisine=greek&intolerances=gluten",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "cuisine",
							"value": "European"
						},
						{
							"key": "excludeCuisine",
							"value": "greek"
						},
						{
							"key": "intolerances",
							"value": "gluten"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Recipes 20",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spoonacular.com/recipes/complexSearch?cuisine=French&excludeCuisine=greek&intolerances=gluten",
					"protocol": "https",
					"host": [
						"api",
						"spoonacular",
						"com"
					],
					"path": [
						"recipes",
						"complexSearch"
					],
					"query": [
						{
							"key": "cuisine",
							"value": "French"
						},
						{
							"key": "excludeCuisine",
							"value": "greek"
						},
						{
							"key": "intolerances",
							"value": "gluten"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "f0aff8f0262c4d24a997529555086625",
				"type": "string"
			},
			{
				"key": "in",
				"value": "query",
				"type": "string"
			},
			{
				"key": "key",
				"value": "apiKey",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}